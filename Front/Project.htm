<!DOCTYPE html>
<html lang="zh-hant" data-bs-theme="dark">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>專案</title>

    <!-- Sweet alert -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <!-- Bootstarp5 -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/js/bootstrap.bundle.min.js"></script>

    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <!-- CSS & Js -->
    <link href="css/style.css" rel="stylesheet">
    <script src="js/function.js"></script>
    <script src="js/webapi.js"></script>
    <script src="js/element.js"></script>

</head>
<script>
    // 使用者按下 Project 選項後，紀錄該選項的 ProjectID
    let clickedProjID = null;
    // 定義圖表物件資料
    let chartInfo = null;

    // 初始化動作
    window.onload = function () {
        // 定義機器陣列清單
        let machinelist = null;
        // 定義專案陣列清單，最後會放入左邊的清單列中
        let projectContainer = document.getElementById('projectContainer'); // project 列表的元件
        InitializeProcess();
    }

    async function InitializeProcess() {
        // 初始化你的瀏覽器顏色
        setColorMode();

        // 初始化圖表物件
        chartInfo = Initialize_ChartInfo('Chart');
        chartInfo.Chart.options.animation.duration = 500;
        await GetMachineList();
        await GetProjectList();
    }
    // 抓取 Machine 資料
    async function GetMachineList() {

        // 呼叫 WebAPI 取得 Machine 資料表的所有資料
        machinelist = await API_GetMachineList();

        // 取得上傳 CSV 檔案小頁面中，機台下拉式選單的元件
        let selectCSVMachineID = document.getElementById('selectCSVMachineID');

        // 一開始先把下拉式列表的選項都先刪除。
        selectCSVMachineID.options.length = 0;

        // 用迴圈把 Machine 的所有資料添加至機台的下拉式選單中
        machinelist.forEach(element => {
            // 先創建一個 option 的元件。
            let option = document.createElement('option');
            // 給予這個 option 顯示出來的文字跟這個 option 的值。
            option.text = element.name;
            option.value = element.id;
            // 把該選項添加至機台的下拉式選單中。
            selectCSVMachineID.add(option);
        });
    }

    // 將選定的放入左邊的"專案清單"中
    async function GetProjectList() {

        // 一開始先把 project 列表的選項都先刪除。
        projectContainer.options.length = 0;

        // 用 WebAPI 去呼叫 Project 資料表裡面的資料。
        const projectlist = await API_GetProjectList();

        // 用迴圈把 Project List 的資料添加到 Project 列表的選項中。
        projectlist.forEach(element => {
            // 先創建一個 Option 的元件。
            let option = document.createElement('option');
            // 利用 Machine ID 去尋找 Machine list 中對應的 Machine Name。
            const machinename = machinelist.find(c => c.id === element.machineID)?.name;

            // 給予這個 Option 顯示出來的文字跟這個 Option 的值。
            option.text = `【${element.id}】${machinename} `;
            option.value = JSON.stringify(element);

            // 把該 Option 添加至專案列表的選項元件中。
            projectContainer.add(option);
        });

        // 當專案列表的選項被按下，要顯示該選項的相關資訊。
        projectContainer.addEventListener('change', async (e) => {

            // 取得被使用者點下的那個選項中，裡面的值。
            const proj = JSON.parse(e.target.value);

            // 顯示該選項中的 project 資訊到 專案資訊卡片中。
            clickedProjID = proj.id; // 紀錄使用者點了哪個 Project ID。
            document.getElementById('txtProjectID').value = proj.id;
            document.getElementById('txtMachineName').value = machinelist.find(c => c.id === proj.machineID)?.name;
            document.getElementById('txtRecordTime').value = proj.recordDateTime;

            // 根據使用者點選的 project ID ，用 WebAPI 去要屬於這個 project ID 的資料。
            const featuredata = await API_GetData(proj.id);

            // 清空 Chart 上面原本的資料。
            chartInfo.Data.labels = []
            chartInfo.Data.datasets.forEach(element => {
                element.data = [];
            });

            // 把該 project ID 的數值寫進去 Chart 裡面。
            let index = 0;
            featuredata.forEach(element => {

                index = index + 1; // 計數器+1
                chartInfo.Data.labels.push(index); // Chart 橫向放計數器。

                // 添加直向的資料
                chartInfo.Data.datasets[0].data.push(element.xRms);
                chartInfo.Data.datasets[1].data.push(element.yRms);
                chartInfo.Data.datasets[2].data.push(element.zRms);
            });

            // 更新Chart圖表。
            chartInfo.Chart.update();
        });
    }

    // 刪除 project 。
    async function btnDeleteProject() {

        // (檢查) 使用者沒有點選專案列表裡面的選項。
        if (clickedProjID == null) {
            Swal.fire({
                title: '警告',
                text: '並沒有點選要刪除的專案。',
                icon: 'warning',
                confirmButtonText: 'OK'
            });
            return; // 結束動作。
        }

        // (雙重確認) 確定使用者真的要刪除。
        const isCheck = await Swal.fire({
            title: '刪除專案',
            text: `你確定要刪除 project ID:[${clickedProjID}] 嗎？`,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: '刪除',
            cancelButtonText: '取消'
        });

        // 當使用者按下確定刪除，要執行刪除專案的動作。
        if (isCheck.isConfirmed) {
            await API_DeleteProject(clickedProjID);

            GetProjectList();

            // 清空 Chart 上面原本的資料。
            chartInfo.Data.labels = []
            chartInfo.Data.datasets.forEach(element => {
                element.data = [];

                document.getElementById('txtProjectID').value = '';
                document.getElementById('txtMachineName').value = '';
                document.getElementById('txtRecordTime').value = '';

                // 更新Chart圖表。
                chartInfo.Chart.update();

                Swal.fire({
                    title: '成功！',
                    text: '成功刪除專案',
                    icon: 'success',
                    confirmButtonText: '確定'
                });
                return; // 結束動作。
            });
        }
    }
    async function btnUploadCSVFile() {
        const fileInput = document.getElementById('inputCSVFile');

        // 取得選中的檔案 (這是一個 FileList 物件)
        const file = fileInput.files[0];  // 取得第一個檔案 (如果有選擇的話)

        // 檢查檔案是否存在
        if (!file) {
            // 沒有選擇檔案
            Swal.fire({
                title: '錯誤',
                text: '請選擇一個 CSV 檔案。',
                icon: 'error',
                confirmButtonText: '確定'
            });
            return;
        }

        // 檢查檔案格式是否為 .csv
        if (file.name.split('.').pop().toLowerCase() !== 'csv') {
            // 如果檔案格式不是 CSV
            Swal.fire({
                title: '錯誤',
                text: '檔案必須是 CSV 格式。',
                icon: 'error',
                confirmButtonText: '確定'
            });
            return;
        }

        // 都沒問題就上傳檔案
        const MachineID = document.querySelector("#selectCSVMachineID").value;
        const isUpload = await API_UploadCSV(MachineID, file);

        // 如果檔案上傳失敗
        if (isUpload.error) {
            Swal.fire({
                title: '錯誤',
                text: error.message,
                icon: 'error',
                confirmButtonText: '確定'
            });
            return;
        }

        GetProjectList();

        // 清空 Chart 上面原本的資料。
        chartInfo.Data.labels = []
        chartInfo.Data.datasets.forEach(element => {
            element.data = [];
        });
        chartInfo.Chart.update();

        // 顯示上傳成功
        Swal.fire({
            title: '成功',
            text: '上傳成功',
            icon: 'success',
            confirmButtonText: '確定'
        }).then((result) => {

            // 關閉上傳頁面
            const btnCloseModal = document.getElementById('btnCloseCSVModal');
            btnCloseModal.click();
        });
    }

    function setColorMode() {
        const currentTheme = window.matchMedia("(prefers-color-scheme: dark)").matches;

        var htmlTag = document.documentElement;
        if (currentTheme) {
            // 當使用者的偏好是暗色模式時
            htmlTag.setAttribute('data-bs-theme', 'dark');
            this.textContent = '☀️';  // 使用暗色模式時顯示 ☀️
        } else {
            // 當使用者的偏好是明亮模式時
            htmlTag.setAttribute('data-bs-theme', 'light');
            this.textContent = '🌙';  // 使用明亮模式時顯示 🌙
        }
    };

    //  佈景主題轉換
    document.addEventListener('DOMContentLoaded', function () {
        const themeToggleBtn = document.getElementById('theme-toggle-btn');

        // 設定初始圖示
        themeToggleBtn.textContent = document.documentElement.getAttribute('data-bs-theme') === 'dark' ? '☀️' : '🌙';

        themeToggleBtn.addEventListener('click', function (e) {
            e.preventDefault();

            const htmlTag = document.documentElement;
            const currentTheme = htmlTag.getAttribute('data-bs-theme');

            if (currentTheme === 'light') {
                htmlTag.setAttribute('data-bs-theme', 'dark');
                this.textContent = '☀️';
            } else {
                htmlTag.setAttribute('data-bs-theme', 'light');
                this.textContent = '🌙';
            }
        });
    });
</script>

<body>
    <!-- 導覽列 -->
    <nav class="navbar navbar-expand-sm bg-dark navbar-dark">
        <div class="container">
            <ul class="navbar-nav">
                <a class="nav-link" id="theme-toggle-btn" href="#"></a>
                <li class="nav-item">
                    <a class="nav-link" href="#">工廠</a>
                <li class="nav-item">
                    <a class="nav-link" href="Mechine.htm">機器</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link active" href="#">專案</a>
                </li>
            </ul>
        </div>
    </nav>

    <!-- 內容 -->
    <div class="container mt-5 content">
        <!-- 標題 -->
        <h1>專案列表</h1><br>

        <!-- 把內容切成左右兩邊 -->
        <div class="row">

            <!-- (左邊) Project list -->
            <div class="col-lg-3">
                <div class="h-100 d-flex flex-column">
                    <label for="projectContainer" class="form-label">專案列表：</label>
                    <select class="form-select flex-grow-1" id="projectContainer" size="8"></select>
                </div>
            </div>
            <!-- (右邊) Project的資訊、Chart、上傳刪除的按鈕 -->
            <div class="col-lg-9 d-flex flex-column">

                <!-- 專案資訊 -->
                <div class="card shadow-sm mb-4">

                    <!-- 標題 -->
                    <div class="card-header bg-light text-primary">
                        <strong>專案資訊</strong>
                    </div>

                    <!-- 內容 -->
                    <div class="card-body">

                        <!-- 分割(左邊、中間、右邊)，每個中間會有間隔3 -->
                        <div class="row g-3">

                            <!-- Project ID -->
                            <div class="col-lg-4">

                                <!-- 小標題 -->
                                <label for="startDatePicker" class="form-label">專案 ID：</label>
                                <input type="text" id="txtProjectID" class="form-control" disabled>
                            </div>

                            <!-- Machine Name -->
                            <div class="col-lg-4">
                                <!-- 小標題 -->
                                <label for="endDatePicker" class="form-label">機器名稱：</label>
                                <input type="text" id="txtMachineName" class="form-control" disabled>
                            </div>

                            <!-- Record Time -->
                            <div class="col-lg-4">
                                <!-- 小標題 -->
                                <label for="endDatePicker" class="form-label">時間：</label>
                                <input type="text" id="txtRecordTime" class="form-control" disabled>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Chart (折線圖、長條圖) -->
                <div class="card flex-grow-1 shadow-sm">
                    <div class="card-body">
                        <canvas id="Chart" class="w-100 h-100"></canvas>
                    </div>
                </div>

                <!-- 最下面兩個按鈕 -->
                <div class="row">
                    <!-- 刪除專案的按鈕 -->
                    <div class="col-lg-6 d-grid mt-3">
                        <button type="button" class="btn btn-danger" onclick="btnDeleteProject()">刪除專案</button>
                    </div>
                    <!-- 上傳 CSV 檔案的按鈕 -->
                    <div class="col-lg-6 d-grid mt-3">
                        <button type="button" class="btn btn-success" data-bs-toggle="modal"
                            data-bs-target="#CSVModal">上傳 CSV 檔案</button>
                    </div>
                </div>

            </div>
        </div>
    </div>

    <!-- 當按下上傳 CSV 按鈕，會跳出一個小頁面 -->
    <div class="modal fade" id="CSVModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content shadow">
                <!-- (標題) 最上方的區域 -->
                <div class="modal-header bg-primary text-white">
                    <!-- 標題 -->
                    <h5 class="modal-title">上傳 CSV 檔案</h5>
                    <!-- (叉叉按鈕) 關閉這個小頁面的按鈕 -->
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"
                        id="btnCloseCSVModal"></button>
                </div>

                <!-- (內容) 中間的區域 -->
                <div class="modal-body">
                    <!-- (選擇框) 使用者選擇的機台 -->
                    <div class="mb-3">
                        <!-- (標題) 說明選擇框的意義 -->
                        <label class="form-label">選擇要上傳的機台：</label>
                        <!-- 選擇框 -->
                        <select class="form-select" id="selectCSVMachineID">
                            <option value=''></option>
                        </select>
                    </div>

                    <!-- (選擇按鈕) 使用者選擇的要上傳的檔案 -->
                    <div class="mb-3">
                        <!-- (標題) 說明選擇框的意義 -->
                        <label class="form-label">選擇要上傳的　CSV　檔案：</label>
                        <!-- 選擇框 (只允許上傳csv檔案) -->
                        <input type="file" class="form-control" id="inputCSVFile" accept=".csv">
                    </div>
                </div>

                <!-- (按鈕) 最下方區域 -->
                <div class="modal-footer">
                    <!-- (確認按鈕) 確定要上傳檔案 -->
                    <button type="button" class="btn btn-primary" onclick="btnUploadCSVFile()">上傳</button>
                </div>
            </div>
        </div>
    </div>

    <!-- 最底下的黑線 -->
    <footer class="text-center">
        <p class="mb-0">版權所有 - 2025 智慧製造課程</p>
    </footer>

    </div>
    </div>
    </div>
</body>

</html>